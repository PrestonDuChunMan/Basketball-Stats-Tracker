{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\CSCI2720\\\\demo-app\\\\src\\\\pages\\\\AllPlayers.js\",\n  _s = $RefreshSig$();\nimport { render } from '@testing-library/react';\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AllPlayers = () => {\n  _s();\n  const [players, setPlayers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetchAllPlayers();\n  }, []);\n  const fetchAllPlayers = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/players');\n      if (!response.ok) throw new Error('Network not ok');\n      const data = await response.json();\n      setPlayers(data);\n      setLoading(false);\n    } catch (error) {\n      console.log(\"fetch error: \" + error);\n      setLoading(false);\n      setError(error.message);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: players.map(player => /*#__PURE__*/_jsxDEV(\"div\", {}, player.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"accordion\",\n      id: \"accordionExample\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"accordion-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          class: \"accordion-header\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"accordion-button\",\n            type: \"button\",\n            \"data-bs-toggle\": \"collapse\",\n            \"data-bs-target\": \"#collapseOne\",\n            \"aria-expanded\": \"true\",\n            \"aria-controls\": \"collapseOne\",\n            children: \"Accordion Item #1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"collapseOne\",\n          class: \"accordion-collapse collapse show\",\n          \"data-bs-parent\": \"#accordionExample\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"accordion-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"This is the first item\\u2019s accordion body.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 29\n            }, this), \" It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\\u2019s also worth noting that just about any HTML can go within the \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \".accordion-body\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 448\n            }, this), \", though the transition does limit overflow.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"accordion-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          class: \"accordion-header\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"accordion-button collapsed\",\n            type: \"button\",\n            \"data-bs-toggle\": \"collapse\",\n            \"data-bs-target\": \"#collapseTwo\",\n            \"aria-expanded\": \"false\",\n            \"aria-controls\": \"collapseTwo\",\n            children: \"Accordion Item #2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"collapseTwo\",\n          class: \"accordion-collapse collapse\",\n          \"data-bs-parent\": \"#accordionExample\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"accordion-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"This is the second item\\u2019s accordion body.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 29\n            }, this), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\\u2019s also worth noting that just about any HTML can go within the \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \".accordion-body\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 450\n            }, this), \", though the transition does limit overflow.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"accordion-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          class: \"accordion-header\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"accordion-button collapsed\",\n            type: \"button\",\n            \"data-bs-toggle\": \"collapse\",\n            \"data-bs-target\": \"#collapseThree\",\n            \"aria-expanded\": \"false\",\n            \"aria-controls\": \"collapseThree\",\n            children: \"Accordion Item #3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"collapseThree\",\n          class: \"accordion-collapse collapse\",\n          \"data-bs-parent\": \"#accordionExample\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"accordion-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"This is the third item\\u2019s accordion body.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 29\n            }, this), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\\u2019s also worth noting that just about any HTML can go within the \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \".accordion-body\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 449\n            }, this), \", though the transition does limit overflow.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(AllPlayers, \"gI5IvuAkxLm+sIrB6oQgpFtvEsI=\");\n_c = AllPlayers;\nexport default AllPlayers;\nvar _c;\n$RefreshReg$(_c, \"AllPlayers\");","map":{"version":3,"names":["render","React","useEffect","useState","AllPlayers","players","setPlayers","loading","setLoading","error","setError","fetchAllPlayers","response","fetch","ok","Error","data","json","console","log","message","map","player","id"],"sources":["C:/Users/User/Desktop/CSCI2720/demo-app/src/pages/AllPlayers.js"],"sourcesContent":["import { render } from '@testing-library/react';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst AllPlayers = () => {\r\n    const [players, setPlayers] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetchAllPlayers();\r\n    }, []);\r\n\r\n    const fetchAllPlayers = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:8080/players');\r\n            if (!response.ok)\r\n                throw new Error('Network not ok')\r\n            const data = await response.json();\r\n            setPlayers(data);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            console.log(\"fetch error: \" + error);\r\n            setLoading(false);\r\n            setError(error.message);\r\n        }\r\n    }\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div>Error: {error}</div>;\r\n      }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n            {players.map(player => (\r\n                    <div key={player.id}>\r\n                        \r\n                    </div>\r\n            ))}\r\n            </div>\r\n            <div class=\"accordion\" id=\"accordionExample\">\r\n                <div class=\"accordion-item\">\r\n                    <h2 class=\"accordion-header\">\r\n                        <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" class=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\r\n                        <div class=\"accordion-body\">\r\n                            <strong>This is the first item’s accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It’s also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"accordion-item\">\r\n                    <h2 class=\"accordion-header\">\r\n                        <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" class=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                        <div class=\"accordion-body\">\r\n                            <strong>This is the second item’s accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It’s also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"accordion-item\">\r\n                    <h2 class=\"accordion-header\">\r\n                        <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" class=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                        <div class=\"accordion-body\">\r\n                            <strong>This is the third item’s accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It’s also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AllPlayers;"],"mappings":"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"},"metadata":{},"sourceType":"module"}