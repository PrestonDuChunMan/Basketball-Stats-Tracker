{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\CSCI2720\\\\demo-app\\\\src\\\\pages\\\\AllPlayers.js\",\n  _s = $RefreshSig$();\nimport { render } from '@testing-library/react';\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AllPlayers = () => {\n  _s();\n  const {\n    playerId,\n    playerName\n  } = useParams();\n  const [averages, setAverages] = useState([]);\n  const [players, setPlayers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetchAllPlayers();\n  }, []);\n  const fetchPlayerAverages = async id => {\n    try {\n      const response = await fetch(`http://localhost:8080/player/${id}/averages`);\n      if (!response.ok) throw new Error('Network not ok');\n      const data = await response.json();\n      setAverages(prevAverages => ({\n        ...prevAverages,\n        [id]: data\n      }));\n    } catch (error) {\n      console.log(\"fetch error: \" + error);\n      setError(error.message);\n    }\n  };\n  const fetchAllPlayers = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/players');\n      if (!response.ok) throw new Error('Network not ok');\n      const data = await response.json();\n      setPlayers(data);\n      setLoading(false);\n    } catch (error) {\n      console.log(\"fetch error: \" + error);\n      setLoading(false);\n      setError(error.message);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: players.map(player => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        style: {\n          width: '18rem'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            class: \"card-title\",\n            children: player.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this), averages[player.id] && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card-text\",\n            children: [\"PPG: \", averages[player.id].ppg, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 63\n            }, this), \"RPG: \", averages[player.id].rpg, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 63\n            }, this), \"APG: \", averages[player.id].apg]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `/player/${player.id}/${player.name}`,\n            style: {\n              textDecoration: 'none'\n            },\n            children: \"Game Averages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)\n      }, player.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(AllPlayers, \"EonnaVvom+Y291vaiqtnok7ts70=\", false, function () {\n  return [useParams];\n});\n_c = AllPlayers;\nexport default AllPlayers;\nvar _c;\n$RefreshReg$(_c, \"AllPlayers\");","map":{"version":3,"names":["render","React","useEffect","useState","useParams","useLocation","AllPlayers","playerId","playerName","averages","setAverages","players","setPlayers","loading","setLoading","error","setError","fetchAllPlayers","fetchPlayerAverages","id","response","fetch","ok","Error","data","json","prevAverages","console","log","message","map","player","width","name","ppg","rpg","apg","textDecoration"],"sources":["C:/Users/User/Desktop/CSCI2720/demo-app/src/pages/AllPlayers.js"],"sourcesContent":["import { render } from '@testing-library/react';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams, useLocation } from 'react-router-dom';\r\n\r\nconst AllPlayers = () => {\r\n    const { playerId, playerName } = useParams();\r\n    const [averages, setAverages] = useState([]);\r\n    const [players, setPlayers] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetchAllPlayers();\r\n    }, []);\r\n\r\n    const fetchPlayerAverages = async (id) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/player/${id}/averages`);\r\n            if (!response.ok)\r\n                throw new Error('Network not ok')\r\n            const data = await response.json();\r\n            setAverages(prevAverages => ({ ...prevAverages, [id]: data }));\r\n\r\n        } catch (error) {\r\n            console.log(\"fetch error: \" + error);\r\n            setError(error.message);\r\n        }\r\n\r\n    }\r\n\r\n    const fetchAllPlayers = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:8080/players');\r\n            if (!response.ok)\r\n                throw new Error('Network not ok')\r\n            const data = await response.json();\r\n            setPlayers(data);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            console.log(\"fetch error: \" + error);\r\n            setLoading(false);\r\n            setError(error.message);\r\n        }\r\n    }\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div>Error: {error}</div>;\r\n      }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n            {players.map(player => (\r\n                <div key={player.id} className=\"card\" style={{ width: '18rem' }}>\r\n                    <div class=\"card-body\">\r\n                        <h5 class=\"card-title\">{ player.name}</h5>\r\n                        {averages[player.id] && (\r\n                            <p className=\"card-text\">\r\n                                PPG: {averages[player.id].ppg}<br />\r\n                                RPG: {averages[player.id].rpg}<br />\r\n                                APG: {averages[player.id].apg}\r\n                            </p>\r\n                        )}\r\n                        <a href={`/player/${player.id}/${player.name}`} style={{ textDecoration: 'none' }}>Game Averages</a>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n            </div>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default AllPlayers;"],"mappings":"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"},"metadata":{},"sourceType":"module"}